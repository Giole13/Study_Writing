컨트롤 L = 줄 삭제
컨트롤 방향키 = 단어 단위로 이동
컨트롤 c, v = 그자리에서 복사 붙여넣기

글꼴(폰트) 같은 경우는 설정에서 가독성이 높은 폰트로 변경(팁)
il|jI 의 비교를 쉽게 하기 위함 (lucid console폰트 쓰기)

깃허브에서 한 줄 작성후 뒷공간에 4칸이상의 여백을 주면
한줄 떨어져 출력

깃허브 클라우드 복제방법
다운받을 파일 에서 - git besh here - "git clone (깃헙에서 복사한 코드 링크) ./main" 입력

깃 마크다운 사용법 알아보기

메모장에서 F5 누르면 날짜 호출 오후 오후 2:37 2022-12-15

add : 로컬 수정사항을 스테이지영역에 추가
(무엇을 변경할 것인지 선택하는 과정) - 결정하기 전 단계
commit : 스테이지 영역의 내용을 깃에 기록함
push : 커밋한 내용을 원격 리포지토리에 덮어씀

git status 작업 디렉토리와 스테이지 영역의 확인
git add . 현재 배쉬한 폴더의 모든 파일을 스테이지에 올림
git commit -m"쓰고싶은 메세지" 스테이지에서 깃으로 넘기기 위해 기록
(메시지를 사용하는 규칙 => 컨벤션) 
	-코드에 적용하는 규칙은 코딩컨벤션
	-커밋 메시지 컨벤션
git push 깃에 커밋한 기록을 덮어 씌움

깃 : 소스코드를 관리하기 위해서 사용하는 것, 클라우드를 통해서 소스코드를 저장하며, 누가 언제 무엇을
수정했는지 파악하기 위해서 사용하는것.

깃 프로그램은 제거후에도 c드라이브에 남아있음
warning: could not find ui helper 'github.ui' 라는 오류는 최신버전의 깃에서 발생하는 이슈임
(구버전을 설치해서 해결함)

파편화 된 프로젝트
프로젝트 관리를 해야하는 이유 : 여러 프로젝트가 흩어져있을때 한곳에 모아 시각화 해야 설명하기에 편함
- 본인의 커리어 관리
- 동료 개발자와 협업
- 퇴사, 이직 등 인수인계

정리를 해놓지 않으면 기억하기 힘듬
로직을 시각화 할수 있는 종류
- 블로그에 정리
- 마인드맵
- 플로우차트
 둥글한 모양 : 터미널-시작과 종료
 사각형 : 프로세스
 4변형 : 유저 인풋
 마름모 : yes of no 로 결정
http://draw.io/ 플로우차트 만들어주는 사이트

블로그에 쓸 내용 (과제에요)
 - 오늘 배운 단축키
 - 깃헙을 쓰는 이유
 - 코딩컨벤션 의미를 알아오기 (아래쪽의 내용)
	- 헝가리안 
	- 파스칼
	- 스네이크
	- 기타 등등
 - 커밋 메시지 컨벤션
	https://www.conventionalcommits.org/en/v1.0.0/
<type>[optional scope]: <description> 같은 형태로 입력
git commit -m "[HJ] feat(New Project) Create new project"
feat : 새로운 내용을 추가할때 쓰는 커밋

 - 플로우차트 어떻게 그리는지 알아서 정리하기

클래스 다이어그램은 패스

과제에 대하여
 - 마감시간 이내에 제출.
 - 만약 완성을 못한 경우 미제출(평가 대상이 아님) 보다 미완성으로 제출을 해라.
 - 가능한 마감시간 이내에 제출할 것.
